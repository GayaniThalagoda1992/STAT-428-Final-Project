checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)",
value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)",
value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num," and your account balance will be",round(dataInput()[[2]],2),"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
??melt
install.packages("reshape2")
install.packages("reshape2")
options(scipen = 1, digits = 4, width = 80)
library(knitr)
library(kableExtra)
library(quantmod)
library(reshape2)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
male<-read.table("/Users/Peng/Desktop/STAT428/STAT-428-Final-Project/mltper_1x1.txt",skip=1,header=T)
female<-read.table("/Users/Peng/Desktop/STAT428/STAT-428-Final-Project/fltper_1x1.txt",skip=1,header=T)
both<-read.table("/Users/Peng/Desktop/STAT428/STAT-428-Final-Project/bltper_1x1.txt",skip=1,header=T)
head(both)##Data Structure
names(both)##Variable Names
text_tbl <- data.frame(
Variables = names(both),
Explanation = c("Year or range of years (for both period & cohort data)","Age group for n-year interval from exact age x to just before exact age x+n, where n=1, 4, 5, or infinite(open age interval)","Central death rate between ages x and x+n","Probability of death between ages x and x+n","Average length of survival between ages x and x+n for persons dying in the interval","Number of survivors at exact age x, assuming l(0) = 100,000","Number of deaths between ages x and x+n","Number of person-years lived between ages x and x+n","Number of person-years remaining after exact age x","Life expectancy at exact age x (in years)"
)
)
kable(text_tbl, "html") %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T,border_left=T) %>%
column_spec(2, width = "30em",border_right = T,background='pink')
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Guaranteed Minimum Maturity Benefit"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Insured Period",
start = "2013-01-01",
end = as.character(Sys.Date())),
numericInput("num", "Premium Invested", value = 100),
checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)",
value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)",
value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num," and your account balance will be",round(dataInput()[[2]],2),"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
options(scipen = 1, digits = 4, width = 80)
library(knitr)
library(kableExtra)
library(quantmod)
library(reshape2)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
male   <- read.table("data/mltper_1x1.txt",skip=1,header=T)
female <- read.table("data/fltper_1x1.txt",skip=1,header=T)
both   <- read.table("data/bltper_1x1.txt",skip=1,header=T)
head(both)##Data Structure
names(both)##Variable Names
text_tbl <- data.frame(
Variables = names(both),
Explanation = c("Year or range of years (for both period & cohort data)","Age group for n-year interval from exact age x to just before exact age x+n, where n=1, 4, 5, or infinite(open age interval)","Central death rate between ages x and x+n","Probability of death between ages x and x+n","Average length of survival between ages x and x+n for persons dying in the interval","Number of survivors at exact age x, assuming l(0) = 100,000","Number of deaths between ages x and x+n","Number of person-years lived between ages x and x+n","Number of person-years remaining after exact age x","Life expectancy at exact age x (in years)"
)
)
kable(text_tbl, "html") %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T,border_left=T) %>%
column_spec(2, width = "30em",border_right = T,background='pink')
dow_jones <- read.csv("data/STAT-428-Final-Project/Dow Jones.csv")
nasdaq    <- read.csv("data/NASDAQ.csv")
s_p500    <- read.csv("data/S&P 500.csv")
dow_jones <- read.csv("data/Dow Jones.csv")
nasdaq    <- read.csv("data/NASDAQ.csv")
s_p500    <- read.csv("data/S&P 500.csv")
head(nasdaq)##Data Structure
names(nasdaq)##variable names
text_tbl <- data.frame(
Variables = names(nasdaq),
Explanation = c("Stock Timestamp","Open Price","Highest Price","lowest Price","Closing Price","Adjusted Closing Price","Trading Volume"
)
)
kable(text_tbl, "html") %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T,border_left=T) %>%
column_spec(2, width = "30em",border_right = T,background='pink')
#mortality function
mortality<-function(age,year,length,gender){
if((age+length)>max(as.numeric(levels(male$Age)),na.rm = TRUE)){return("invalid inputs")}
a<-which(gender$Age==age & gender$Year==year)
tqx<-(gender$lx[a]-gender$lx[a+length])/gender$lx[a]
return(tqx)
}
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Guaranteed Minimum Maturity Benefit"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Insured Period",
start = "2013-01-01",
end = as.character(Sys.Date())),
numericInput("num", "Premium Invested", value = 100),
checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)",
value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)",
value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num," and your account balance will be",round(dataInput()[[2]],2),"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
options(scipen = 1, digits = 4, width = 80)
package_list <- c("tidyverse", "knitr", "kableExtra", "quantmod", "reshape2", "shiny")
lapply(package_list, require, character.only = TRUE)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
# Chunk 1: setup
options(scipen = 1, digits = 4, width = 80)
package_list <- c("tidyverse", "knitr", "kableExtra", "quantmod", "reshape2", "shiny")
lapply(package_list, require, character.only = TRUE)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE,
message=FALSE, warning=FALSE)
# Chunk 2
male   <- read.table("data/mltper_1x1.txt",skip=1,header=T)
female <- read.table("data/fltper_1x1.txt",skip=1,header=T)
both   <- read.table("data/bltper_1x1.txt",skip=1,header=T)
# Chunk 3
head(both)##Data Structure
names(both)##Variable Names
# Chunk 4
text_tbl <- data.frame(
Variables = names(both),
Explanation = c("Year or range of years (for both period & cohort data)","Age group for n-year interval from exact age x to just before exact age x+n, where n=1, 4, 5, or infinite(open age interval)","Central death rate between ages x and x+n","Probability of death between ages x and x+n","Average length of survival between ages x and x+n for persons dying in the interval","Number of survivors at exact age x, assuming l(0) = 100,000","Number of deaths between ages x and x+n","Number of person-years lived between ages x and x+n","Number of person-years remaining after exact age x","Life expectancy at exact age x (in years)"
)
)
kable(text_tbl, "html") %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T,border_left=T) %>%
column_spec(2, width = "30em",border_right = T,background='pink')
# Chunk 5
dow_jones <- read.csv("data/Dow Jones.csv")
nasdaq    <- read.csv("data/NASDAQ.csv")
s_p500    <- read.csv("data/S&P 500.csv")
# Chunk 6
head(nasdaq)##Data Structure
names(nasdaq)##variable names
# Chunk 7
text_tbl <- data.frame(
Variables = names(nasdaq),
Explanation = c("Stock Timestamp","Open Price","Highest Price","lowest Price","Closing Price","Adjusted Closing Price","Trading Volume"
)
)
kable(text_tbl, "html") %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T,border_left=T) %>%
column_spec(2, width = "30em",border_right = T,background='pink')
# Chunk 8
#mortality function
mortality<-function(age,year,length,gender){
if((age+length)>max(as.numeric(levels(male$Age)),na.rm = TRUE)){return("invalid inputs")}
a<-which(gender$Age==age & gender$Year==year)
tqx<-(gender$lx[a]-gender$lx[a+length])/gender$lx[a]
return(tqx)
}
# Chunk 9
ui <- fluidPage(
titlePanel("Guaranteed Minimum Maturity Benefit"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Insured Period",
start = "2013-01-01",
end = as.character(Sys.Date())),
numericInput("num", "Premium Invested", value = 100),
checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)", value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)", value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num,
" and your account balance will be",round(dataInput()[[2]],2),"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Guaranteed Minimum Maturity Benefit"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Insured Period",
start = "2013-01-01",
end = as.character(Sys.Date())),
numericInput("num", "Premium Invested", value = 100),
checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)", value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)", value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num,
" and your account balance will be",round(dataInput()[[2]],2),
"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Guaranteed Minimum Maturity Benefit"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Insured Period",
start = "2013-01-01",
end = as.character(Sys.Date())),
numericInput("num", "Premium Invested", value = 100),
checkboxInput("log","Plot y Axis on Log Scale"),
checkboxInput("St", "Real Time Stock Value (St)",
value = TRUE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts (Ft)",
value = FALSE),
checkboxInput("Gt","Guranteed Value (Gt)", value=FALSE)),
mainPanel(plotOutput("plot"),h3(textOutput("final")))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a_1<-getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
a<-as.data.frame(a_1)
n<-length(a[,1])
Ft_col<-Gt_val<-numeric(n)
for (i in 1:length(Ft_col)){
Ft_col[i]<-input$num*(a[,2][i]/a[,2][1])*exp(-i*0.02/365)
Gt_val[i]<-max(Ft_col[i],input$num*exp(i*0.01/365))
}
ind<-c()
if(input$St==TRUE){ind<-c(ind,2)}
if(input$Ft==TRUE){ind<-c(ind,3)}
if(input$Gt==TRUE){ind<-c(ind,4)}
ind<-c(1,ind)
dates=index(a_1)
St=a[,4]
Ft=Ft_col
Gt=Gt_val
all_data<-data.frame(dates,St,Ft,Gt)[,ind]
final_payout<-max(Gt_val[n],Ft_col[n])
if(input$log==FALSE){
list(all_data,final_payout)}
else{
list(data.frame(dates,log(St),log(Ft),log(Gt))[,ind],final_payout)
}
})
output$plot <- renderPlot({
df <- melt(dataInput()[[1]], "dates")
X<-as.Date(dataInput()[[1]][n,1])
Y<-dataInput()[[2]]
df2<-data.frame(x=X,y=Y)
ggplot(df, aes(x=dates, y=value, color=variable)) +
geom_line()
})
output$final<-renderPrint({
paste("Your Initial Premium Investment is",input$num," and your account balance will be",round(dataInput()[[2]],2),"after the designated period")
})
}
# Run the app
shinyApp(ui, server)
