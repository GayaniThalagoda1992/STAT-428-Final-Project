auto.assign = FALSE)
x<-as.Date(index(stock_dat))
y<-stock_dat[,4]
data.frame(x,y)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x,y))+geom_line()
})
}
# Run the app
shinyApp(ui, server)
f
f<-getSymbols("AAPL",auto.assign = F)
names(f)
f["AAPL.Open" ]
f["AAPL.Open"]
as.data.frame(f)
as.data.frame(f)["AAPL.Open" ]
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(a,dates=index(a))
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=names(dataInput()[4])))+geom_line()
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(a,dates=index(a))
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=names(dataInput())[4]))+geom_line()
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values)+geom_line()
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
output$plot <- renderPlot({
if(input$St==TRUE){ ggplot(data=dataInput(),aes(x=dates,y=values))+geom_line()}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
if(input$St==TRUE){ ggplot(data=dataInput(),aes(x=dates,y=values))+geom_line(aes(color="Real Stock Value"))}
if(input$Ft==TRUE){ ggplot(data=Ft_cal(),aes(x=dates,y=values))+geom_line(aes(color="Actual Account Value"))}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+if(input$St==TRUE){geom_line(aes(color="Real Stock Value"))}+
if(input$Ft==TRUE){geom_line(aes(color="Actual Account Value"))}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+if(input$St==TRUE){geom_line(aes(color="Real Stock Value"))}+
if(input$Ft==TRUE){geom_line(aes(Ft_cal(),color="Actual Account Value"))}
})
}
# Run the app
shinyApp(ui, server)
#mortality function
mortality<-function(age,year,length,gender){
if((age+length)>max(as.numeric(levels(male$Age)),na.rm = TRUE)){return("invalid inputs")}
a<-which(gender$Age==age & gender$Year==year)
tqx<-(gender$lx[a]-gender$lx[a+length])/gender$lx[a]
return(tqx)
}
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+if(input$St==TRUE){geom_line(aes(color="red"))}+
if(input$Ft==TRUE){geom_line(data=Ft_cal(),aes(color="blue"))}
})
}
# Run the app
shinyApp(ui, server)
ggplot()
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+if(input$St==TRUE){geom_line(aes(color="red"))}+
if(input$Ft==TRUE){geom_line(data=Ft_cal(),aes(color="blue"))}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+if(input$St==TRUE){data=dataInput()+geom_line(aes(color="red"))}+
if(input$Ft==TRUE){geom_line(data=Ft_cal(),aes(color="blue"))}
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Stock Visualization"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Google finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("St", "Real Time Stock Value",
value = FALSE),
checkboxInput("Ft","Market Value of the policy holder's subaccounts",
value = FALSE),
checkboxInput("Gt","Guranteed Value", value=FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
a<- as.data.frame(getSymbols(input$symb, src = "google",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE))
data.frame(dates=index(a),values=a[,4])
})
Ft_cal<-reactive({
Ft_col<-numeric(length(dataInput()[,1]))
for (i in 1:length(Ft_col)){
Ft_col[i]<-50000*(dataInput()[,2][i]/dataInput()[,2][1])*exp(-i*0.02/365)
}
data.frame(dates=dataInput()[,1],values=Ft_col)
})
output$plot <- renderPlot({
ggplot(data=dataInput(),aes(x=dates,y=values))+
if(input$St==TRUE){geom_line(data=Ft_cal(),aes(color="red"))}+
if(input$Ft==TRUE){geom_line(data=Ft_cal(),aes(color="blue"))}
})
}
# Run the app
shinyApp(ui, server)
